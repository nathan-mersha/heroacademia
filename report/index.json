{
  "stats": {
    "suites": 24,
    "tests": 40,
    "passes": 40,
    "pending": 0,
    "failures": 0,
    "start": "2019-06-05T14:42:58.675Z",
    "end": "2019-06-05T14:42:59.333Z",
    "duration": 658,
    "testsRegistered": 40,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9ddb1a6e-8a10-48fc-a3e5-ca6435daf222",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7ac6fd96-de99-444e-ae00-c9cee8c35c95",
        "title": "teacher",
        "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "85628121-c3ce-46d7-8cc1-d7d82b523466",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create teacher",
                "fullTitle": "teacher Create Should successfully create teacher",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.teacher.create(),'post',dummyData.teacher.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isteacher(body, true);\n    dummyData.teacher.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1630e820-ffc3-4c31-91b0-72b4fead1369",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1630e820-ffc3-4c31-91b0-72b4fead1369"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 149,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "1d3335ca-4e41-4988-8f14-4194e8c82cb0",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve teacher data (public)",
                "fullTitle": "teacher Find Should successfully retrieve teacher data (public)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.teacher.findByIdPublic(dummyData.teacher.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.teacher.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ce58401e-fc16-4750-bf9e-40f08028d0d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve teacher data (private)",
                "fullTitle": "teacher Find Should successfully retrieve teacher data (private)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.teacher.findByIdPrivate(dummyData.teacher.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.teacher.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cbd98a95-b326-4973-9051-917e97a0a213",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve teacher data ( Id wrong format )",
                "fullTitle": "teacher Find Should fail to retrieve teacher data ( Id wrong format )",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.teacher.findByIdPublic(dummyData.teacher.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.QUERY_ERROR.errorCode); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b3521ac2-e025-458e-9e74-931ff8460dcd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ce58401e-fc16-4750-bf9e-40f08028d0d3",
              "cbd98a95-b326-4973-9051-917e97a0a213",
              "b3521ac2-e025-458e-9e74-931ff8460dcd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "d10adf4b-c8f5-4b5c-b1ce-c1b903876d43",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve teacher paginated data",
                "fullTitle": "teacher Find paginated Should successfully retrieve teacher paginated data",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validQuery = '__validQuery__';\nsendRequest(url.teacher.findPaginated(validQuery),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c0df5fd8-77f6-4910-a8c1-d809d070751d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c0df5fd8-77f6-4910-a8c1-d809d070751d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 215,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "a07077f0-3b23-4bce-9b9f-52f8da882137",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update teacher data",
                "fullTitle": "teacher Update Should successfully update teacher data",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.teacher.get.success._id}`;\nsendRequest(url.teacher.update(query),'put',dummyData.teacher.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "64727609-c67f-4393-9bd0-fba4da38df98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update teacher data (Query not found)",
                "fullTitle": "teacher Update Should fail to update teacher data (Query not found)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.teacher.update(query),'put',dummyData.teacher.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6701e4f-5802-4ef3-ae7e-236af7bc5070",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update teacher data (Invalid update data)",
                "fullTitle": "teacher Update Should fail to update teacher data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.teacher.get.success._id}`;\nsendRequest(url.teacher.update(query),'put',dummyData.teacher.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6dffbcc9-0ac9-40b6-9621-2282b273738c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "64727609-c67f-4393-9bd0-fba4da38df98",
              "e6701e4f-5802-4ef3-ae7e-236af7bc5070",
              "6dffbcc9-0ac9-40b6-9621-2282b273738c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "c2e073a1-c840-4d86-84d3-ccfc1b3a20b1",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove teacher data",
                "fullTitle": "teacher Remove Should successfully remove teacher data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.teacher.get.success._id}`;\nsendRequest(url.teacher.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ee87628c-730a-48cd-8be4-e52afbe3d410",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail remove teacher data (Query not found)",
                "fullTitle": "teacher Remove Should fail remove teacher data (Query not found)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.teacher.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n                });",
                "err": {},
                "isRoot": false,
                "uuid": "2b5a5bf2-f62b-40b0-8a5f-2de0db32d937",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee87628c-730a-48cd-8be4-e52afbe3d410",
              "2b5a5bf2-f62b-40b0-8a5f-2de0db32d937"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "855f1478-41ee-4563-be7d-01d9de339561",
        "title": "student",
        "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8d2a448b-c658-42e0-a976-beee45bb9a87",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create student",
                "fullTitle": "student Create Should successfully create student",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.student.create(),'post',dummyData.student.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isstudent(body, true);\n    dummyData.student.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "599c9393-fd68-4815-af30-badf34cebd31",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "599c9393-fd68-4815-af30-badf34cebd31"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "9e6d3e01-35b9-451f-8ea8-4ff6aa08c554",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve student data (public)",
                "fullTitle": "student Find Should successfully retrieve student data (public)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.student.findByIdPublic(dummyData.student.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.student.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f3e1f524-6fcd-47a0-8339-cc67d8c172c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve student data (private)",
                "fullTitle": "student Find Should successfully retrieve student data (private)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.student.findByIdPrivate(dummyData.student.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.student.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9e9be496-a92d-4a88-9ee7-13559193094f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve student data ( Id wrong format )",
                "fullTitle": "student Find Should fail to retrieve student data ( Id wrong format )",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.student.findByIdPublic(dummyData.student.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.QUERY_ERROR.errorCode); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0299a070-d1ff-4dd5-a8ab-90f00dfc0d26",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f3e1f524-6fcd-47a0-8339-cc67d8c172c2",
              "9e9be496-a92d-4a88-9ee7-13559193094f",
              "0299a070-d1ff-4dd5-a8ab-90f00dfc0d26"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "af2cb893-5217-48b3-a55a-405071423daf",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve student paginated data",
                "fullTitle": "student Find paginated Should successfully retrieve student paginated data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validQuery = '__validQuery__';\nsendRequest(url.student.findPaginated(validQuery),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "891e191f-d28c-41fe-ac2c-a3c816ab133c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "891e191f-d28c-41fe-ac2c-a3c816ab133c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2481a696-b151-4b4d-9058-9b32b26ff3e7",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update student data",
                "fullTitle": "student Update Should successfully update student data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.student.get.success._id}`;\nsendRequest(url.student.update(query),'put',dummyData.student.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "911ac954-47b9-4f16-ae0b-4174737eb6ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update student data (Query not found)",
                "fullTitle": "student Update Should fail to update student data (Query not found)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.student.update(query),'put',dummyData.student.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "74e3c6ab-7ce2-4a0b-be85-2a830bce5ef7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update student data (Invalid update data)",
                "fullTitle": "student Update Should fail to update student data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.student.get.success._id}`;\nsendRequest(url.student.update(query),'put',dummyData.student.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "92fd49c6-9aad-40ae-8439-81328160f1d3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "911ac954-47b9-4f16-ae0b-4174737eb6ba",
              "74e3c6ab-7ce2-4a0b-be85-2a830bce5ef7",
              "92fd49c6-9aad-40ae-8439-81328160f1d3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "71233b30-6598-4a0a-8c6b-cd57ea2a3d26",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove student data",
                "fullTitle": "student Remove Should successfully remove student data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.student.get.success._id}`;\nsendRequest(url.student.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "324aa49b-67d9-44e4-9608-07cb03706962",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail remove student data (Query not found)",
                "fullTitle": "student Remove Should fail remove student data (Query not found)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.student.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n                });",
                "err": {},
                "isRoot": false,
                "uuid": "a951b6c7-a02b-48a0-9cc2-1197be9bcfa6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "324aa49b-67d9-44e4-9608-07cb03706962",
              "a951b6c7-a02b-48a0-9cc2-1197be9bcfa6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "df887544-c1fd-4f58-8c8f-0f78ce4a4c2b",
        "title": "tournament",
        "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9c9e9e1d-05ec-4523-acd6-22ab191bdda1",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create tournament",
                "fullTitle": "tournament Create Should successfully create tournament",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.tournament.create(),'post',dummyData.tournament.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    istournament(body, true);\n    dummyData.tournament.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "574f9685-a8f2-4d68-b193-b01cdc591b48",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "574f9685-a8f2-4d68-b193-b01cdc591b48"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "ac1fb9fc-a753-48cb-99bf-ad0cdf759531",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve tournament data (public)",
                "fullTitle": "tournament Find Should successfully retrieve tournament data (public)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.tournament.findByIdPublic(dummyData.tournament.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.tournament.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "508b005a-a152-4693-8227-1946ab7f3e3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve tournament data (private)",
                "fullTitle": "tournament Find Should successfully retrieve tournament data (private)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.tournament.findByIdPrivate(dummyData.tournament.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.tournament.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8a11fdf2-44f7-4e8d-9198-24bb933e9d17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve tournament data ( Id wrong format )",
                "fullTitle": "tournament Find Should fail to retrieve tournament data ( Id wrong format )",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.tournament.findByIdPublic(dummyData.tournament.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.QUERY_ERROR.errorCode); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "71b38a08-b42a-4d68-ba99-c7f9aee49a16",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "508b005a-a152-4693-8227-1946ab7f3e3b",
              "8a11fdf2-44f7-4e8d-9198-24bb933e9d17",
              "71b38a08-b42a-4d68-ba99-c7f9aee49a16"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "62642278-aa0c-4879-b442-77de74cc4d10",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve tournament paginated data",
                "fullTitle": "tournament Find paginated Should successfully retrieve tournament paginated data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validQuery = '__validQuery__';\nsendRequest(url.tournament.findPaginated(validQuery),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8dff7fb1-6ce2-41f7-964a-73805b976bc9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8dff7fb1-6ce2-41f7-964a-73805b976bc9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2c87a944-0cd6-4fbd-8c96-5740e420cca9",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update tournament data",
                "fullTitle": "tournament Update Should successfully update tournament data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.tournament.get.success._id}`;\nsendRequest(url.tournament.update(query),'put',dummyData.tournament.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b49b8fe5-552a-4c58-92bb-06700fa0d2b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update tournament data (Query not found)",
                "fullTitle": "tournament Update Should fail to update tournament data (Query not found)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.tournament.update(query),'put',dummyData.tournament.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4bd0e605-c844-459d-8123-46987ed779a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update tournament data (Invalid update data)",
                "fullTitle": "tournament Update Should fail to update tournament data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.tournament.get.success._id}`;\nsendRequest(url.tournament.update(query),'put',dummyData.tournament.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "77f52e01-a996-47e7-9a90-8fb7d264fc7c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b49b8fe5-552a-4c58-92bb-06700fa0d2b8",
              "4bd0e605-c844-459d-8123-46987ed779a0",
              "77f52e01-a996-47e7-9a90-8fb7d264fc7c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "53ad883a-73bb-4dd8-adc5-cdd94ca2ea47",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove tournament data",
                "fullTitle": "tournament Remove Should successfully remove tournament data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.tournament.get.success._id}`;\nsendRequest(url.tournament.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7d6eff17-f4d3-4b4c-97ca-ec5f72081885",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail remove tournament data (Query not found)",
                "fullTitle": "tournament Remove Should fail remove tournament data (Query not found)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.tournament.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n                });",
                "err": {},
                "isRoot": false,
                "uuid": "c3d6ffce-aaf1-4cf1-8578-7a80e964685a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d6eff17-f4d3-4b4c-97ca-ec5f72081885",
              "c3d6ffce-aaf1-4cf1-8578-7a80e964685a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "390b9115-b279-4341-9e50-f44d179a55fa",
        "title": "history",
        "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0852beed-b201-4a6d-9bfa-1cb779a50af6",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create history",
                "fullTitle": "history Create Should successfully create history",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.history.create(),'post',dummyData.history.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    ishistory(body, true);\n    dummyData.history.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "322b04f6-25ef-4343-8652-c64d2e1b40f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "322b04f6-25ef-4343-8652-c64d2e1b40f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "a4c0eb11-4168-4629-b573-a8e987ffcc75",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve history data (public)",
                "fullTitle": "history Find Should successfully retrieve history data (public)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.history.findByIdPublic(dummyData.history.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.history.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "523a6708-c074-442f-9aee-b10bb1cbb3d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve history data (private)",
                "fullTitle": "history Find Should successfully retrieve history data (private)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.history.findByIdPrivate(dummyData.history.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.history.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5464b8e1-55f6-4d01-b0e3-5d559b2f5f70",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve history data ( Id wrong format )",
                "fullTitle": "history Find Should fail to retrieve history data ( Id wrong format )",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.history.findByIdPublic(dummyData.history.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.QUERY_ERROR.errorCode); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ca39d542-f973-4317-bfbf-fab959514489",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "523a6708-c074-442f-9aee-b10bb1cbb3d1",
              "5464b8e1-55f6-4d01-b0e3-5d559b2f5f70",
              "ca39d542-f973-4317-bfbf-fab959514489"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "740eaee5-ee8d-476a-9e0a-1ee19ad56ade",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve history paginated data",
                "fullTitle": "history Find paginated Should successfully retrieve history paginated data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validQuery = '__validQuery__';\nsendRequest(url.history.findPaginated(validQuery),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "08965c51-60a2-4a28-b76e-426ed8ec4255",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08965c51-60a2-4a28-b76e-426ed8ec4255"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "692d7ddb-c173-43df-af83-c66b5dce121a",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update history data",
                "fullTitle": "history Update Should successfully update history data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.history.get.success._id}`;\nsendRequest(url.history.update(query),'put',dummyData.history.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a9da9ba7-0b7f-4177-b41d-63ab29ceaae5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update history data (Query not found)",
                "fullTitle": "history Update Should fail to update history data (Query not found)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.history.update(query),'put',dummyData.history.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2c2a43ee-a00f-4001-86d0-0b03a0930095",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update history data (Invalid update data)",
                "fullTitle": "history Update Should fail to update history data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.history.get.success._id}`;\nsendRequest(url.history.update(query),'put',dummyData.history.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "130897ba-b73e-4196-bf37-3f390c37d096",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a9da9ba7-0b7f-4177-b41d-63ab29ceaae5",
              "2c2a43ee-a00f-4001-86d0-0b03a0930095",
              "130897ba-b73e-4196-bf37-3f390c37d096"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "70ab6c03-1de0-4bcf-b353-19ba12445ff7",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/lib/Hero Academia/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove history data",
                "fullTitle": "history Remove Should successfully remove history data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.history.get.success._id}`;\nsendRequest(url.history.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c8b83ed3-3db0-4429-8707-1a5811d9a54c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail remove history data (Query not found)",
                "fullTitle": "history Remove Should fail remove history data (Query not found)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = '';\nsendRequest(url.history.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n                });",
                "err": {},
                "isRoot": false,
                "uuid": "5d2be4df-59a9-4691-b0a5-2094ae410605",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8b83ed3-3db0-4429-8707-1a5811d9a54c",
              "5d2be4df-59a9-4691-b0a5-2094ae410605"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}